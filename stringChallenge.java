import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class stringChallenge {
    // Wrapper for recursive function to enclose the match list
    public static String solver(String init, String[] matches){
        ArrayList<String> matching_strs = new ArrayList<String> (Arrays.asList(matches));
        return recursive(init, 0, matching_strs);
    }
    // The recursive function that traverses the tree generated by
    // match containment in recursively split strings
    public static String recursive(String init, int index, ArrayList<String> matching_strs){
        System.out.printf("%s,%s\n",matching_strs.toString(),init);
        if (matching_strs.size()<=index){
            return init;
        }
        if (matching_strs.isEmpty()){
            return init;
        }
        String result_str = init;
        if(!(init.contains(matching_strs.get(index)))){
            result_str = recursive(init, index + 2, matching_strs);
        }
        else {
            String find = matching_strs.remove(index);
            String replace = matching_strs.remove(index);
            String[] pieces = init.split(find, 2);
            String first = recursive(pieces[0], index, matching_strs);
            String second = recursive(pieces[1], index, matching_strs);
            result_str = first.concat(replace).concat(second);
        }
            return result_str;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader in = null;
        List<String> lines = new ArrayList<String>();
        try {
                in = new BufferedReader(new FileReader(args[0]));
        String str;
        while ((str = in.readLine()) != null) {
                    lines.add(str);
                        }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                        in.close();
                            }
        }
        // iterate over each line in the input file
        // parsing the semi-colon/comma seperated values
        for (String line : lines){
            String[] split = line.split(";",2);
            String init_str = split[0];
            String str_split = split[1];
            String[] matching = str_split.split(",");
            String result = solver(init_str, matching);
            System.out.println(result);
        }
    }
}
